Method: int Partition(int[] numbers, int left, int right)
    {
        int pivot = numbers[left];
        while (true)
        {
            while (numbers[left] < pivot)
                left++;
 
            while (numbers[right] > pivot)
                right--;
 
            if (left < right)
              {
                int temp = numbers[right];
                numbers[right] = numbers[left];
                numbers[left] = temp;
              }
              else
              {
                    return right;
              }
        }
    }
 
    Class: QuickPosInfo
    {
        public int left;
        public int right;
    };
     
     QuickPosInfo info = new QuickPosInfo();
 
      Method: void QuickSort_Iterative(int[] numbers, int left, int right)
      {
       
        if(left >= right)
            return; // Invalid index range
 
            LinkedList<QuickPosInfo> list = new LinkedList<QuickPosInfo>();
 
        info.left = left;
        info.right = right;
            list.add(info);
 
        while(true)
        {
            if(list.size() == 0)
                break;
 
                  left = list.get(0).left;
                  right = list.get(0).right;
                  list.remove(0);
 
            int pivot = Partition(numbers, left, right);   
            
            if(pivot > 1)
            {
                info.left = left;
                info.right = pivot - 1;
                list.add(info);
            }
 
            if(pivot + 1 < right)
            {
                info.left = pivot + 1;
                info.right = right;
                list.add(info);
            }
        }
    }

  int pickMedian3 (int[] data, int a, int b, int c)
  {
    if (data[a] < data[b] && data[b] < data[c] 
    		|| data[c] < data[b] && data[b] < data[a])
    	return data[b];
    else if (data[b] < data[a] && data[a] < data[c]
    		|| data[c] < data[a] && data[a] < data[b])
    	return data[a];
    else if (data[b] < data[c] && data[c] < data[a]
    		|| data[a] < data[c] && data[c] < data[b])
    	return data[c];
   
  }

    =================================
    Stack Values [5]step:
    numbers[] = {3, 7, 1, 9, 2, 8, 5, 4}
    left = 4
    right = 7
    pivot = 2
    temp = 4


